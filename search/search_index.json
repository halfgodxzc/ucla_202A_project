{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"This is Zichao and Yuheng's project 1: Thesis Similar work Prove 2: Problem ESP phase 3: Experiment Experiment setup 4: Result Data process Result","title":"This is Zichao and Yuheng's project"},{"location":"#this-is-zichao-and-yuhengs-project","text":"","title":"This is Zichao and Yuheng's project"},{"location":"#1-thesis","text":"","title":"1: Thesis"},{"location":"#similar-work","text":"","title":"Similar work"},{"location":"#prove","text":"","title":"Prove"},{"location":"#2-problem","text":"","title":"2: Problem"},{"location":"#esp-phase","text":"","title":"ESP phase"},{"location":"#3-experiment","text":"","title":"3: Experiment"},{"location":"#experiment-setup","text":"","title":"Experiment setup"},{"location":"#4-result","text":"","title":"4: Result"},{"location":"#data-process","text":"","title":"Data process"},{"location":"#result","text":"","title":"Result"},{"location":"Arduino/arduino/","text":"Use Edge Impulse and Arduino to implement KNN classifier Edge impulse is a website that can help you to train and implement simple embedded AI. The procedure is strightfoward. We can process and upload our data. Then we choose a proper module. In this project, we choose a KNN model. After trainning the network, the website will generate a model.h file for us. And we can upload it into Arduino. Finally, we use serial port to transmit CSI data to arduino, and it can identity the drinks.","title":"Arduino"},{"location":"Arduino/arduino/#use-edge-impulse-and-arduino-to-implement-knn-classifier","text":"","title":"Use Edge Impulse and Arduino to implement KNN classifier"},{"location":"Arduino/arduino/#edge-impulse-is-a-website-that-can-help-you-to-train-and-implement-simple-embedded-ai-the-procedure-is-strightfoward-we-can-process-and-upload-our-data-then-we-choose-a-proper-module-in-this-project-we-choose-a-knn-model","text":"","title":"Edge impulse is a website that can help you to train and implement simple embedded AI. The procedure is strightfoward. We can process and upload our data. Then we choose a proper module. In this project, we choose a KNN model."},{"location":"Arduino/arduino/#after-trainning-the-network-the-website-will-generate-a-modelh-file-for-us-and-we-can-upload-it-into-arduino-finally-we-use-serial-port-to-transmit-csi-data-to-arduino-and-it-can-identity-the-drinks","text":"","title":"After trainning the network, the website will generate a model.h file for us. And we can upload it into Arduino.  Finally, we use serial port to transmit CSI data to arduino, and it can identity the drinks."},{"location":"Experiment/exsetup/","text":"The setup of our experiment","title":"Setup"},{"location":"Experiment/exsetup/#the-setup-of-our-experiment","text":"","title":"The setup of our experiment"},{"location":"Problem/Antenna/","text":"","title":"Antenna"},{"location":"Problem/Esp32/","text":"Phase sanitization Random phase problem The phase of CSI is available from the ESP32, but they can not used for the liquide indentify directly. In fact, the phase information from the ESP32's CSI data is very random. The typcial phase we extract from CSI like the picture following. This experiment is meant to measure the phase and rssi baseline of AIR. And we only focus on subcarrier 34. The result is supposed stable around a certain value. The result, however, is waving from 1.5 to -1.5 which is $ \\pi /2$ to $-\\pi/2$. The raw phase information, therefore, is useless for liquid indentification. Phase denoise The random phase problem is due to the random noise and unsynchronized timing between transmitter and receiver. People use a equation to denote the CSI phase noise. In this model, the $\\Delta$t is the time lag between transmitter and receiver. The $\\beta$ is the unknown phase offset, $m_i$ is the subcarrier indices for i=1 to 56, and the N is the FFT size from IEEE 802.11n specification. In our project, all the data is discrete, so N=64. It's impossible to know the $\\Delta$t and $\\beta$, but we can implement a linear transformation on the raw phase to remove the terms of $\\Delta$t and $\\beta$. For a single measurement the $\\Delta$t and $\\beta$ is a constant. Therefore, we can get the slope of phase and the offset across the entire frequency band to remove them. The calibrated phase is: After implement this algorithm, we can have a useable CSI phase information. Prove of the method This method provides an upper bound on the variance of the calibrated phase, and indicated that the calibrated is relatively stable.","title":"Esp phase"},{"location":"Problem/Esp32/#phase-sanitization","text":"","title":"Phase sanitization"},{"location":"Problem/Esp32/#random-phase-problem","text":"","title":"Random phase problem"},{"location":"Problem/Esp32/#the-phase-of-csi-is-available-from-the-esp32-but-they-can-not-used-for-the-liquide-indentify-directly-in-fact-the-phase-information-from-the-esp32s-csi-data-is-very-random-the-typcial-phase-we-extract-from-csi-like-the-picture-following","text":"","title":"The phase of CSI is available from the ESP32, but they can not used for the liquide indentify directly. In fact, the phase information from the ESP32's CSI data is very random. The typcial phase we extract from CSI like the picture following."},{"location":"Problem/Esp32/#this-experiment-is-meant-to-measure-the-phase-and-rssi-baseline-of-air-and-we-only-focus-on-subcarrier-34-the-result-is-supposed-stable-around-a-certain-value-the-result-however-is-waving-from-15-to-15-which-is-pi-2-to-pi2-the-raw-phase-information-therefore-is-useless-for-liquid-indentification","text":"","title":"This experiment is meant to measure the phase and rssi baseline of AIR. And we only focus on subcarrier 34. The result is supposed stable around a certain value. The result, however, is waving from 1.5 to -1.5 which is $ \\pi /2$ to $-\\pi/2$. The raw phase information, therefore, is useless for liquid indentification."},{"location":"Problem/Esp32/#phase-denoise","text":"","title":"Phase denoise"},{"location":"Problem/Esp32/#the-random-phase-problem-is-due-to-the-random-noise-and-unsynchronized-timing-between-transmitter-and-receiver-people-use-a-equation-to-denote-the-csi-phase-noise","text":"","title":"The random phase problem is due to the random noise and unsynchronized timing between transmitter and receiver. People use a equation to denote the CSI phase noise."},{"location":"Problem/Esp32/#in-this-model-the-deltat-is-the-time-lag-between-transmitter-and-receiver-the-beta-is-the-unknown-phase-offset-m_i-is-the-subcarrier-indices-for-i1-to-56-and-the-n-is-the-fft-size-from-ieee-80211n-specification-in-our-project-all-the-data-is-discrete-so-n64-its-impossible-to-know-the-deltat-and-beta-but-we-can-implement-a-linear-transformation-on-the-raw-phase-to-remove-the-terms-of-deltat-and-beta","text":"","title":"In this model, the $\\Delta$t is the time lag between transmitter and receiver. The  $\\beta$ is the unknown phase offset, $m_i$ is the subcarrier indices for i=1 to 56, and the  N is the FFT size from IEEE 802.11n specification. In our project, all the data is discrete, so N=64. It's impossible to know the $\\Delta$t and $\\beta$, but we can implement a linear transformation on the raw phase to remove the terms of $\\Delta$t and $\\beta$."},{"location":"Problem/Esp32/#for-a-single-measurement-the-deltat-and-beta-is-a-constant-therefore-we-can-get-the-slope-of-phase-and-the-offset-across-the-entire-frequency-band-to-remove-them","text":"","title":"For a single measurement the $\\Delta$t and $\\beta$ is a constant. Therefore, we can get the slope of phase and the offset across the entire frequency band to remove them."},{"location":"Problem/Esp32/#the-calibrated-phase-is","text":"","title":"The calibrated phase is:"},{"location":"Problem/Esp32/#after-implement-this-algorithm-we-can-have-a-useable-csi-phase-information","text":"","title":"After implement this algorithm, we can have a useable CSI phase information."},{"location":"Problem/Esp32/#prove-of-the-method","text":"","title":"Prove of the method"},{"location":"Problem/Esp32/#this-method-provides-an-upper-bound-on-the-variance-of-the-calibrated-phase-and-indicated-that-the-calibrated-is-relatively-stable","text":"","title":"This method provides an upper bound on the variance of the calibrated phase, and indicated that the calibrated is relatively stable."},{"location":"Result/dataprocess/","text":"hello","title":"Data process"},{"location":"Result/result/","text":"hello","title":"Result"},{"location":"Thesis/prove/","text":"Why we can use the WiFi signal to identify drinks","title":"Prove"},{"location":"Thesis/prove/#why-we-can-use-the-wifi-signal-to-identify-drinks","text":"","title":"Why we can use the WiFi signal to identify drinks"},{"location":"Thesis/work/","text":"Similar work RFID identify drinks https://dl.acm.org/doi/10.1145/3131348.3131352 Antenna identify drinks https://dl.acm.org/doi/pdf/10.1145/3210240.3210345","title":"Similar work"},{"location":"Thesis/work/#similar-work","text":"RFID identify drinks https://dl.acm.org/doi/10.1145/3131348.3131352 Antenna identify drinks https://dl.acm.org/doi/pdf/10.1145/3210240.3210345","title":"Similar work"}]}