{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"This is Zichao and Yuheng's project 1: Thesis Similar work Prove 2: Problem ESP phase 3: Experiment Experiment setup 4:Arduino Arduino setup 5: Result Data process Result","title":"This is Zichao and Yuheng's project"},{"location":"#this-is-zichao-and-yuhengs-project","text":"","title":"This is Zichao and Yuheng's project"},{"location":"#1-thesis","text":"","title":"1: Thesis"},{"location":"#similar-work","text":"","title":"Similar work"},{"location":"#prove","text":"","title":"Prove"},{"location":"#2-problem","text":"","title":"2: Problem"},{"location":"#esp-phase","text":"","title":"ESP phase"},{"location":"#3-experiment","text":"","title":"3: Experiment"},{"location":"#experiment-setup","text":"","title":"Experiment setup"},{"location":"#4arduino","text":"","title":"4:Arduino"},{"location":"#arduino-setup","text":"","title":"Arduino setup"},{"location":"#5-result","text":"","title":"5: Result"},{"location":"#data-process","text":"","title":"Data process"},{"location":"#result","text":"","title":"Result"},{"location":"Arduino/arduino/","text":"Use Edge Impulse and Arduino to implement KNN classifier Edge impulse is a website that can help you to train and implement simple embedded AI. The procedure is strightfoward. We can process and upload our data. Then we choose a proper module. In this project, we choose a KNN model. After trainning the network, the website will generate a model.h file for us. And we can upload it into Arduino. Finally, we use serial port to transmit CSI data to arduino, and it can identity the drinks.","title":"Arduino"},{"location":"Arduino/arduino/#use-edge-impulse-and-arduino-to-implement-knn-classifier","text":"","title":"Use Edge Impulse and Arduino to implement KNN classifier"},{"location":"Arduino/arduino/#edge-impulse-is-a-website-that-can-help-you-to-train-and-implement-simple-embedded-ai-the-procedure-is-strightfoward-we-can-process-and-upload-our-data-then-we-choose-a-proper-module-in-this-project-we-choose-a-knn-model","text":"","title":"Edge impulse is a website that can help you to train and implement simple embedded AI. The procedure is strightfoward. We can process and upload our data. Then we choose a proper module. In this project, we choose a KNN model."},{"location":"Arduino/arduino/#after-trainning-the-network-the-website-will-generate-a-modelh-file-for-us-and-we-can-upload-it-into-arduino-finally-we-use-serial-port-to-transmit-csi-data-to-arduino-and-it-can-identity-the-drinks","text":"","title":"After trainning the network, the website will generate a model.h file for us. And we can upload it into Arduino.  Finally, we use serial port to transmit CSI data to arduino, and it can identity the drinks."},{"location":"Experiment/exsetup/","text":"The setup of our experiment","title":"Setup"},{"location":"Experiment/exsetup/#the-setup-of-our-experiment","text":"","title":"The setup of our experiment"},{"location":"Problem/Antenna/","text":"","title":"Antenna"},{"location":"Problem/Esp32/","text":"Phase sanitization Random phase problem The phase of CSI is available from the ESP32, but they can not used for the liquide indentify directly. In fact, the phase information from the ESP32's CSI data is very random. The typcial phase we extract from CSI like the picture following. This experiment is meant to measure the phase and rssi baseline of AIR. And we only focus on subcarrier 34. The result is supposed stable around a certain value. The result, however, is waving from 1.5 to -1.5 which is $ \\pi /2$ to $-\\pi/2$. The raw phase information, therefore, is useless for liquid indentification. Phase denoise The random phase problem is due to the random noise and unsynchronized timing between transmitter and receiver. People use a equation to denote the CSI phase noise. In this model, the $\\Delta$t is the time lag between transmitter and receiver. The $\\beta$ is the unknown phase offset, $m_i$ is the subcarrier indices for i=1 to 56, and the N is the FFT size from IEEE 802.11n specification. In our project, all the data is discrete, so N=64. It's impossible to know the $\\Delta$t and $\\beta$, but we can implement a linear transformation on the raw phase to remove the terms of $\\Delta$t and $\\beta$. For a single measurement the $\\Delta$t and $\\beta$ is a constant. Therefore, we can get the slope of phase and the offset across the entire frequency band to remove them. The calibrated phase is: After implement this algorithm, we can have a useable CSI phase information. Prove of the method This method provides an upper bound on the variance of the calibrated phase, and indicated that the calibrated is relatively stable.","title":"Esp phase"},{"location":"Problem/Esp32/#phase-sanitization","text":"","title":"Phase sanitization"},{"location":"Problem/Esp32/#random-phase-problem","text":"","title":"Random phase problem"},{"location":"Problem/Esp32/#the-phase-of-csi-is-available-from-the-esp32-but-they-can-not-used-for-the-liquide-indentify-directly-in-fact-the-phase-information-from-the-esp32s-csi-data-is-very-random-the-typcial-phase-we-extract-from-csi-like-the-picture-following","text":"","title":"The phase of CSI is available from the ESP32, but they can not used for the liquide indentify directly. In fact, the phase information from the ESP32's CSI data is very random. The typcial phase we extract from CSI like the picture following."},{"location":"Problem/Esp32/#this-experiment-is-meant-to-measure-the-phase-and-rssi-baseline-of-air-and-we-only-focus-on-subcarrier-34-the-result-is-supposed-stable-around-a-certain-value-the-result-however-is-waving-from-15-to-15-which-is-pi-2-to-pi2-the-raw-phase-information-therefore-is-useless-for-liquid-indentification","text":"","title":"This experiment is meant to measure the phase and rssi baseline of AIR. And we only focus on subcarrier 34. The result is supposed stable around a certain value. The result, however, is waving from 1.5 to -1.5 which is $ \\pi /2$ to $-\\pi/2$. The raw phase information, therefore, is useless for liquid indentification."},{"location":"Problem/Esp32/#phase-denoise","text":"","title":"Phase denoise"},{"location":"Problem/Esp32/#the-random-phase-problem-is-due-to-the-random-noise-and-unsynchronized-timing-between-transmitter-and-receiver-people-use-a-equation-to-denote-the-csi-phase-noise","text":"","title":"The random phase problem is due to the random noise and unsynchronized timing between transmitter and receiver. People use a equation to denote the CSI phase noise."},{"location":"Problem/Esp32/#in-this-model-the-deltat-is-the-time-lag-between-transmitter-and-receiver-the-beta-is-the-unknown-phase-offset-m_i-is-the-subcarrier-indices-for-i1-to-56-and-the-n-is-the-fft-size-from-ieee-80211n-specification-in-our-project-all-the-data-is-discrete-so-n64-its-impossible-to-know-the-deltat-and-beta-but-we-can-implement-a-linear-transformation-on-the-raw-phase-to-remove-the-terms-of-deltat-and-beta","text":"","title":"In this model, the $\\Delta$t is the time lag between transmitter and receiver. The  $\\beta$ is the unknown phase offset, $m_i$ is the subcarrier indices for i=1 to 56, and the  N is the FFT size from IEEE 802.11n specification. In our project, all the data is discrete, so N=64. It's impossible to know the $\\Delta$t and $\\beta$, but we can implement a linear transformation on the raw phase to remove the terms of $\\Delta$t and $\\beta$."},{"location":"Problem/Esp32/#for-a-single-measurement-the-deltat-and-beta-is-a-constant-therefore-we-can-get-the-slope-of-phase-and-the-offset-across-the-entire-frequency-band-to-remove-them","text":"","title":"For a single measurement the $\\Delta$t and $\\beta$ is a constant. Therefore, we can get the slope of phase and the offset across the entire frequency band to remove them."},{"location":"Problem/Esp32/#the-calibrated-phase-is","text":"","title":"The calibrated phase is:"},{"location":"Problem/Esp32/#after-implement-this-algorithm-we-can-have-a-useable-csi-phase-information","text":"","title":"After implement this algorithm, we can have a useable CSI phase information."},{"location":"Problem/Esp32/#prove-of-the-method","text":"","title":"Prove of the method"},{"location":"Problem/Esp32/#this-method-provides-an-upper-bound-on-the-variance-of-the-calibrated-phase-and-indicated-that-the-calibrated-is-relatively-stable","text":"","title":"This method provides an upper bound on the variance of the calibrated phase, and indicated that the calibrated is relatively stable."},{"location":"Result/dataprocess/","text":"Data Processing Parameterizing Our Liquid Identifier is based on the fact that when signal travels through different materials, its phase and received signal strangth (RSS) change accordingly. In another word, the signal phase and RSS changes can help identify different materials when parameterized properly. Phase Changes The wavelength of signal changes when penetrating different maetrials due to obsortion. However, the frequency will not change according to K Cheng David (1983) . We can expect a phase change when different materials are placed between the transmitter and receiver. In our experiment set-up, we first measure the phase of air, and then measure the phase when target material is in place. The phases are denoted as $\\phi_{air}$ and $\\phi_{tar}$, respectively. We also introduce $L$ as the distance along the direct path from transmitter to receiver. The phase change $\\Delta \\phi = \\phi_{tar} - \\phi_{air}$ will be given as follows, where $\\beta = \\frac{2\\pi}{\\lambda}$ is defined as the signal's phase constant in the material. RSS Changes We can also expect signal strangth changes when we place different material between the tansmitter and receiver, specifically an amplitude attenuation. Similarly, we denote $R_{air}$ and $R_{tar}$ as the RSS of air and target material, respectively. The change can be expressed as $ \\Delta R = R_{tar} - R_{air}$. Given $\\alpha_{air}$ and $\\alpha_{tar}$ as the attenuation constant of the air and the target material, correspondingly, we express the RSS change as follows. Feature Extraction However, the aforementioned changes are related to the propagation distance $D$, and it will not be robust for the system if we are required to constantly measeure this value everytime. We intend to find a parameter that eliminates the effect of $D$ and use tthe new feature to identify our material. First, we try to extract the information that are not related to $D$ from the expression of $\\Delta \\phi$ and $\\Delta R$, where $\\zeta=0$ for relatively small objects. Then we can define a parameter $\\Omega$ to represent our feature. Denoising The information we received from the system has several configuration that is useful to our feature extraction. The rssi column contains the received signal strength of each read, and the CSI column contains channel state information, which can be extracted as phase information. We denote the subcarrier $i$'s measured phase as $\\angle\\hat{CSI} {i}$. We can express it using the following equation, where $\\angle CSI {i}$ is the real phase, $Z$ is the measurement noise, $\\Delta t$ is the time lag, $\\beta$ is the some offsets, $m_i$ is the subcarrier index and $N$ is the Fast Fourier Transformation (FFT) size. The calibrated phase can be expressed as After denoising, the phase information can be used properly","title":"Data process"},{"location":"Result/dataprocess/#data-processing","text":"","title":"Data Processing"},{"location":"Result/dataprocess/#parameterizing","text":"Our Liquid Identifier is based on the fact that when signal travels through different materials, its phase and received signal strangth (RSS) change accordingly. In another word, the signal phase and RSS changes can help identify different materials when parameterized properly. Phase Changes The wavelength of signal changes when penetrating different maetrials due to obsortion. However, the frequency will not change according to K Cheng David (1983) . We can expect a phase change when different materials are placed between the transmitter and receiver. In our experiment set-up, we first measure the phase of air, and then measure the phase when target material is in place. The phases are denoted as $\\phi_{air}$ and $\\phi_{tar}$, respectively. We also introduce $L$ as the distance along the direct path from transmitter to receiver. The phase change $\\Delta \\phi = \\phi_{tar} - \\phi_{air}$ will be given as follows, where $\\beta = \\frac{2\\pi}{\\lambda}$ is defined as the signal's phase constant in the material. RSS Changes We can also expect signal strangth changes when we place different material between the tansmitter and receiver, specifically an amplitude attenuation. Similarly, we denote $R_{air}$ and $R_{tar}$ as the RSS of air and target material, respectively. The change can be expressed as $ \\Delta R = R_{tar} - R_{air}$. Given $\\alpha_{air}$ and $\\alpha_{tar}$ as the attenuation constant of the air and the target material, correspondingly, we express the RSS change as follows. Feature Extraction However, the aforementioned changes are related to the propagation distance $D$, and it will not be robust for the system if we are required to constantly measeure this value everytime. We intend to find a parameter that eliminates the effect of $D$ and use tthe new feature to identify our material. First, we try to extract the information that are not related to $D$ from the expression of $\\Delta \\phi$ and $\\Delta R$, where $\\zeta=0$ for relatively small objects. Then we can define a parameter $\\Omega$ to represent our feature.","title":"Parameterizing"},{"location":"Result/dataprocess/#denoising","text":"The information we received from the system has several configuration that is useful to our feature extraction. The rssi column contains the received signal strength of each read, and the CSI column contains channel state information, which can be extracted as phase information. We denote the subcarrier $i$'s measured phase as $\\angle\\hat{CSI} {i}$. We can express it using the following equation, where $\\angle CSI {i}$ is the real phase, $Z$ is the measurement noise, $\\Delta t$ is the time lag, $\\beta$ is the some offsets, $m_i$ is the subcarrier index and $N$ is the Fast Fourier Transformation (FFT) size. The calibrated phase can be expressed as After denoising, the phase information can be used properly","title":"Denoising"},{"location":"Result/result/","text":"Result This is a multi-calss classification process, and our goal is to acheive correct label when given a specific RSS and ohase information from the system. We use K-Nearest Neighbors (KNN) to achieve such a result. After implementing KNN on our trainning dataset, and plot the result using confusion matrix. The result is presented as follows. Plug in your plot here As is shown in the confusion matrix, there are four labels 0, 1, 2, and 3, in correspondance with water, sugar water, salt water, and 2% Lactaid milk (lactose is decomposed into carbonhydrate). There is a major diagonal data entry in the confusion matrix, meaning most of the results are correctly labeled. However, we do see some misclassification. For example, lable 3, milk, is sometimes confused with label 1, sugar water, and label 2, salt water, is sometimes confused with fresh water. This confusion is not random and actually makes sense. The reasons are two fold. We use 2% Lactaid milk as our test subject, which contains organic matter and also sugar in carbonhydrate form due to decomposition and preprocessing of lactose. This may result in confusion between milk and sugar water. We use tap water in our experiment, which may contain unfiltered chemicals including all forms of salt, and this could be confused with our salt water content. Additionally, ionization process of salts will also result in lower attenuation, making the feature parameter similar to the water one. in general, we have successfully device a system that helps identifying different liquid contents. This result is achieved by much cheaper and available devices compared with previous study, and such a process can also run on an Arduino, proving portability. We also demonstrate robustness by changing the container from plastic to glass for different measurements and the result are surprising for it still provides correct identification.","title":"Result"},{"location":"Result/result/#result","text":"This is a multi-calss classification process, and our goal is to acheive correct label when given a specific RSS and ohase information from the system. We use K-Nearest Neighbors (KNN) to achieve such a result. After implementing KNN on our trainning dataset, and plot the result using confusion matrix. The result is presented as follows.","title":"Result"},{"location":"Result/result/#plug-in-your-plot-here","text":"As is shown in the confusion matrix, there are four labels 0, 1, 2, and 3, in correspondance with water, sugar water, salt water, and 2% Lactaid milk (lactose is decomposed into carbonhydrate). There is a major diagonal data entry in the confusion matrix, meaning most of the results are correctly labeled. However, we do see some misclassification. For example, lable 3, milk, is sometimes confused with label 1, sugar water, and label 2, salt water, is sometimes confused with fresh water. This confusion is not random and actually makes sense. The reasons are two fold. We use 2% Lactaid milk as our test subject, which contains organic matter and also sugar in carbonhydrate form due to decomposition and preprocessing of lactose. This may result in confusion between milk and sugar water. We use tap water in our experiment, which may contain unfiltered chemicals including all forms of salt, and this could be confused with our salt water content. Additionally, ionization process of salts will also result in lower attenuation, making the feature parameter similar to the water one. in general, we have successfully device a system that helps identifying different liquid contents. This result is achieved by much cheaper and available devices compared with previous study, and such a process can also run on an Arduino, proving portability. We also demonstrate robustness by changing the container from plastic to glass for different measurements and the result are surprising for it still provides correct identification.","title":"Plug in your plot here"},{"location":"Thesis/prove/","text":"Why we can use the WiFi signal to identify drinks","title":"Prove"},{"location":"Thesis/prove/#why-we-can-use-the-wifi-signal-to-identify-drinks","text":"","title":"Why we can use the WiFi signal to identify drinks"},{"location":"Thesis/work/","text":"Similar work RFID identify drinks https://dl.acm.org/doi/10.1145/3131348.3131352 Antenna identify drinks https://dl.acm.org/doi/pdf/10.1145/3210240.3210345 Millimeter-wave estimating soluble sugar https://dl.acm.org/doi/10.1145/3302505.3310065","title":"Similar work"},{"location":"Thesis/work/#similar-work","text":"","title":"Similar work"},{"location":"Thesis/work/#rfid-identify-drinks","text":"https://dl.acm.org/doi/10.1145/3131348.3131352","title":"RFID identify drinks"},{"location":"Thesis/work/#antenna-identify-drinks","text":"https://dl.acm.org/doi/pdf/10.1145/3210240.3210345","title":"Antenna identify drinks"},{"location":"Thesis/work/#millimeter-wave-estimating-soluble-sugar","text":"https://dl.acm.org/doi/10.1145/3302505.3310065","title":"Millimeter-wave estimating soluble sugar"}]}